/*
DLT – Vision UI Dashboard Skeleton
================================================

This repo boots a React + Vite project using the **Vision UI Dashboard React** template and wires it to your Profixio proxy.

Highlights
-----------
- Tailwind + MUI Vision UI design system.
- Azure AD / Entra ID login via MSAL (configured but disabled by default – turn on by uncommenting in `main.tsx`).
- Typed API hooks (`src/api/profixio.ts`) that hit⁣ your Render proxy.
- Example Dashboard page rendering real tournament data in a DataGrid.
- Ready for free deploy on **Azure Static Web Apps** or **Vercel**.

-------------------------------------------------
Files & structure (key parts only)
-------------------------------------------------
.
├── public/
├── src/
│   ├── api/
│   │   └── profixio.ts          ← REST hooks
│   ├── components/
│   │   └── DataTable.tsx       ← generic MUI table
│   ├── pages/
│   │   └── Dashboard.tsx       ← sample page
│   ├── App.tsx
│   └── main.tsx
├── tailwind.config.cjs
├── vite.config.ts
├── package.json
└── README.md

-------------------------------------------------
package.json (excerpt)
-------------------------------------------------
{
  "name": "dlt-portal",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/material": "^5.15.10",
    "@mui/x-data-grid": "^6.22.1",
    "@azure/msal-browser": "^3.16.2",
    "@azure/msal-react": "^2.6.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.2.0",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.5.0",
    "vite": "^5.2.0"
  }
}

-------------------------------------------------
.env.example
-------------------------------------------------
VITE_PROXY_BASE=https://profixio-proxy.onrender.com/proxy
VITE_ORG_CODE=SBBF.SE.BB

-------------------------------------------------
src/api/profixio.ts
-------------------------------------------------
```ts
const BASE = import.meta.env.VITE_PROXY_BASE;
const ORG = import.meta.env.VITE_ORG_CODE;

export async function getTournaments() {
  const r = await fetch(`${BASE}/organisations/${ORG}/tournaments`);
  if (!r.ok) throw new Error(await r.text());
  return r.json();
}

export async function getPlayers(teamId: string) {
  const r = await fetch(`${BASE}/teams/${teamId}/players`);
  if (!r.ok) throw new Error(await r.text());
  return r.json();
}
```

-------------------------------------------------
src/pages/Dashboard.tsx (excerpt)
-------------------------------------------------
```tsx
import { useEffect, useState } from "react";
import { DataGrid, GridColDef } from "@mui/x-data-grid";
import { getTournaments } from "../api/profixio";

export default function Dashboard() {
  const [rows, setRows] = useState<any[]>([]);

  useEffect(() => {
    getTournaments().then(setRows).catch(console.error);
  }, []);

  const cols: GridColDef[] = [
    { field: "id", headerName: "ID", width: 90 },
    { field: "name", headerName: "Tournament", flex: 1 },
    { field: "startDate", headerName: "Start", width: 120 },
    { field: "endDate", headerName: "End", width: 120 },
  ];

  return (
    <div className="p-6">
      <h1 className="text-3xl font-semibold mb-4">Tournaments</h1>
      <DataGrid autoHeight rows={rows} columns={cols} pageSizeOptions={[25]} />
    </div>
  );
}
```

-------------------------------------------------
src/main.tsx (excerpt)
-------------------------------------------------
```tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css"; // Tailwind

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

-------------------------------------------------
README.md (key steps)
-------------------------------------------------
1. `pnpm i` (or `npm i`)
2. Copy `.env.example` → `.env.local` and set your proxy URL.
3. `pnpm dev`
4. Browse `http://localhost:5173`.
5. Deploy
   ```bash
   az staticwebapp create -n dlt-portal -s . -b main
   ```

-------------------------------------------------
Deploy notes
-------------------------------------------------
- Azure Static Web Apps picks port & handles SSL.
- Configure auth later: in portal > Configuration > Authentication.

-------------------------------------------------
*/
